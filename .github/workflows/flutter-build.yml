name: Build and Deploy Flutter App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  APK_NAME: TeacherApp
  ENVIRONMENT: production
  BUILD_BASE_DIR: build
  DEBUG_INFO_DIR: debug_info

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
      with:
        ref: main

    # Keystore file and password validation before any installation
    - name: Verify Keystore Password
      id: verify_keystore
      run: |
        if [ -z "${{ secrets.KEYSTORE_FILE }}" ]; then
          echo "Keystore file is not provided, exiting the workflow."
          exit 1
        fi
        
        # Decode keystore from the secrets and create directory
        mkdir -p $HOME/.keystore
        echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > $HOME/.keystore/key_store_file.jks

        # Validate the keystore password using keytool
        keytool -list -keystore $HOME/.keystore/key_store_file.jks -storepass "${{ secrets.KEY_PASSWORD }}" &>/dev/null
        
        if [ $? -ne 0 ]; then
          echo "Invalid keystore password. Please verify your password and try again."
          exit 1
        else
          echo "Keystore password is valid. Proceeding with the build."
        fi

    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: ~/.pub-cache
        key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
        restore-keys: |
          ${{ runner.os }}-flutter-

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.3'
        channel: stable

    - name: Verify Flutter Installation
      run: |
        flutter --version
        flutter doctor

    # Fastlane installation
    - name: Install Fastlane
      run: |
        sudo apt-get update
        sudo apt-get install -y ruby-full
        sudo gem install fastlane

    - name: Extract Version from pubspec.yaml
      id: extract_version
      run: |
        VERSION_NAME=$(grep '^version:' pubspec.yaml | cut -d ':' -f2 | tr -d '[:space:]')
        VERSION_NAME="${VERSION_NAME}-${GITHUB_RUN_NUMBER}"
        echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
        echo "VERSION_NAME set to: $VERSION_NAME"

    - name: Create Debug Info Directory
      run: |
        mkdir -p "${BUILD_BASE_DIR}/${DEBUG_INFO_DIR}"
        echo "Debug info directory created at: ${BUILD_BASE_DIR}/${DEBUG_INFO_DIR}"

    - name: Generate Env File
      run: |
        echo "DB_NAME=app.db" > .env.production
        echo 'APP_NAME="Personal Tuition Manager"' >> .env.production

    - name: Verify Env File
      run: cat .env.production

    - name: Install Dependencies
      run: |
        cd android
        flutter pub get
        flutter doctor

    - name: Cache Android dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-android-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-android-

    - name: Build App Bundle
      run: |
        flutter build appbundle --release \
          --obfuscate \
          --split-debug-info="${BUILD_BASE_DIR}/${DEBUG_INFO_DIR}" \
          --dart-define=ENV=${ENVIRONMENT} \
          --build-name="${VERSION_NAME}" \
          --build-number=${GITHUB_RUN_NUMBER}

    - name: Rename App Bundle
      run: |
        ORIGINAL_AAB="build/app/outputs/bundle/release/app-release.aab"
        RENAMED_AAB="build/app/outputs/bundle/release/${APK_NAME}-${VERSION_NAME}-${ENVIRONMENT}.aab"
        if [ -f "$ORIGINAL_AAB" ]; then
          mv $ORIGINAL_AAB $RENAMED_AAB
          echo "App Bundle renamed to: $RENAMED_AAB"
          echo "AAB_FILE_PATH=$RENAMED_AAB" >> $GITHUB_ENV
        else
          echo "WARNING: App Bundle not found."
        fi

    - name: Sign App Bundle
      run: |
        if [ -z "${{ secrets.KEYSTORE_FILE }}" ]; then
          echo "Keystore file is missing. Skipping signing step."
          exit 0
        fi
        
        mkdir -p $HOME/.keystore
        echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > $HOME/.keystore/key_store_file.jks
        
        UNSIGNED_AAB="${BUILD_BASE_DIR}/app/outputs/bundle/release/${APK_NAME}-${VERSION_NAME}-${ENVIRONMENT}.aab"
        SIGNED_AAB="${BUILD_BASE_DIR}/app/outputs/bundle/release/${APK_NAME}-${VERSION_NAME}-${ENVIRONMENT}-signed.aab"

        if [ -f "$UNSIGNED_AAB" ]; then
          jarsigner -verbose \
                    -sigalg SHA256withRSA \
                    -digestalg SHA-256 \
                    -keystore $HOME/.keystore/key_store_file.jks \
                    -storepass "${{ secrets.KEY_PASSWORD }}" \
                    -keypass "${{ secrets.KEY_PASSWORD }}" \
                    $UNSIGNED_AAB "${{ secrets.KEY_ALIAS }}"
          mv $UNSIGNED_AAB $SIGNED_AAB
          echo "App Bundle signed and moved to: $SIGNED_AAB"
          echo "SIGNED_AAB_PATH=$SIGNED_AAB" >> $GITHUB_ENV
        else
          echo "ERROR: App Bundle not found at $UNSIGNED_AAB"
          exit 1
        fi

    - name: Upload to Play Store (if Fastlane exists and enabled)
      if: ${{ github.event.inputs.UPLOAD_TO_PLAYSTORE == 'true' && (steps.fastlane_check.outputs.fastlane_installed == 'true') }}
      run: |
        echo "Uploading AAB to Play Store using Fastlane..."
        echo "${{ secrets.PLAY_STORE_JSON_KEY }}" | base64 --decode > play_store_json_key.json
        cd android
        bundle exec fastlane run validate_play_store_json_key json_key:play_store_json_key.json
        bundle exec fastlane deploy json_key:play_store_json_key.json

    - name: Archive Artifacts
      run: |
        echo "Archiving app bundle and debug symbols..."
        mkdir -p $HOME/artifacts
        mv build/app/outputs/bundle/release/*.aab $HOME/artifacts/
        mv build/debug_info/* $HOME/artifacts/
        ls -al $HOME/artifacts
        echo "Artifacts archived."
        
    - name: Success Message
      if: success()
      run: echo "Build successful!"

    - name: Failure Message
      if: failure()
      run: echo "Build failed!"
