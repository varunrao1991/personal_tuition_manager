name: Build and Deploy Flutter App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      UPLOAD_TO_PLAYSTORE:
        description: 'Upload to Play Store?'
        required: false
        default: 'false'

env:
  APK_NAME: TeacherApp
  ENVIRONMENT: production
  BUILD_BASE_DIR: build
  DEBUG_INFO_DIR: debug_info

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      KEYSTORE_PATH: /tmp/keystore/key_store_file.jks

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Verify Keystore Password (with enhanced debug and base64 password support)
        id: verify_keystore
        run: |
          # Create keystore directory
          mkdir -p "$(dirname "$KEYSTORE_PATH")"
      
          # Decode and save the keystore file
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > "$KEYSTORE_PATH"
      
          # Decode the KEY_PASSWORD (which was stored base64-encoded)
          DECODED_KEY_PASSWORD=$(echo "${{ secrets.KEY_PASSWORD }}" | base64 -d)
          DECODED_KEY_ALIAS=$(echo "${{ secrets.KEY_ALIAS }}" | base64 -d)
      
          echo "::debug::Decoded password: >>${DECODED_KEY_PASSWORD}<<"
          echo "::debug::Decoded alias: >>${DECODED_KEY_ALIAS}<<"
      
          # Debug file verification
          echo "::debug::Keystore file verification:"
          ls -la "$(dirname "$KEYSTORE_PATH")"
          file "$KEYSTORE_PATH"
          echo "::debug::Keystore size: $(wc -c <"$KEYSTORE_PATH") bytes"
          echo "::debug::First 100 bytes (hexdump):"
          head -c 100 "$KEYSTORE_PATH" | hexdump -C
          echo "::debug::First 100 bytes (raw base64):"
          head -c 100 "$KEYSTORE_PATH" | base64 -w0
      
          # Verify password and alias
          if ! keytool -list \
            -keystore "$KEYSTORE_PATH" \
            -storepass "$DECODED_KEY_PASSWORD" \
            -alias "$DECODED_KEY_ALIAS" >/dev/null 2>&1; then
            echo "::error::Keystore verification failed! Possible issues:"
            echo "::error::- Invalid password/alias (compare decoded values)"
            echo "::error::- Corrupted keystore (verify file headers above)"
            exit 1
          else
            echo "✅ Keystore verification successful."
          fi            

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          channel: 'stable'

      - name: Verify Flutter Installation
        run: |
          flutter --version
          flutter doctor

      - name: Install Fastlane
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby-full
          sudo gem install bundler fastlane

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Cache Android Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install Flutter Dependencies
        run: flutter pub get

      - name: Generate Env File
        run: |
          echo "DB_NAME=app.db" > .env.production
          echo 'APP_NAME="Personal Tuition Manager"' >> .env.production

      - name: Extract Version from pubspec.yaml
        id: extract_version
        run: |
          VERSION_NAME=$(grep '^version:' pubspec.yaml | cut -d ':' -f2 | tr -d '[:space:]')
          VERSION_NAME="${VERSION_NAME}-${GITHUB_RUN_NUMBER}"
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "VERSION_NAME set to: $VERSION_NAME"

      - name: Create Debug Info Directory
        run: mkdir -p "${BUILD_BASE_DIR}/${DEBUG_INFO_DIR}"

      - name: Build App Bundle (.aab)
        run: |
          flutter build appbundle --release \
            --obfuscate \
            --split-debug-info="${BUILD_BASE_DIR}/${DEBUG_INFO_DIR}" \
            --dart-define=ENV=${ENVIRONMENT} \
            --build-name="${VERSION_NAME}" \
            --build-number=${GITHUB_RUN_NUMBER}

      - name: Sign the AAB
        run: |
          UNSIGNED_AAB="${BUILD_BASE_DIR}/app/outputs/bundle/release/app-release.aab"
          SIGNED_AAB="${BUILD_BASE_DIR}/app/outputs/bundle/release/${APK_NAME}-${VERSION_NAME}-${ENVIRONMENT}-signed.aab"
      
          # Decode password and alias
          DECODED_KEY_PASSWORD=$(echo "${{ secrets.KEY_PASSWORD }}" | base64 -d)
          DECODED_KEY_ALIAS=$(echo "${{ secrets.KEY_ALIAS }}" | base64 -d)
      
          # Sign the AAB
          jarsigner -verbose \
                    -sigalg SHA256withRSA \
                    -digestalg SHA-256 \
                    -keystore "$KEYSTORE_PATH" \
                    -storepass "$DECODED_KEY_PASSWORD" \
                    -keypass "$DECODED_KEY_PASSWORD" \
                    "$UNSIGNED_AAB" "$DECODED_KEY_ALIAS"
      
          # Move signed AAB
          mv "$UNSIGNED_AAB" "$SIGNED_AAB"
          echo "SIGNED_AAB_PATH=$SIGNED_AAB" >> $GITHUB_ENV          

      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            ${{ env.BUILD_BASE_DIR }}/app/outputs/bundle/release/*-signed.aab
            ${{ env.BUILD_BASE_DIR }}/${{ env.DEBUG_INFO_DIR }}/*

      - name: Upload to Play Store
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.UPLOAD_TO_PLAYSTORE == 'true' }}
        run: |
          echo "Preparing for Play Store upload..."
          echo "${{ secrets.PLAY_STORE_JSON_KEY }}" | base64 -d > play_store_json_key.json

          cd android
          bundle install
          bundle exec fastlane run validate_play_store_json_key json_key:../play_store_json_key.json
          bundle exec fastlane deploy json_key:../play_store_json_key.json

      - name: Cleanup Keystore
        if: always()
        run: rm -f "$KEYSTORE_PATH"

      - name: Final Status
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "::notice::✅ Build completed successfully!"
          else
            echo "::error::❌ Build failed!"
          fi