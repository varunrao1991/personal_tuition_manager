name: Build and Deploy Flutter App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  APK_NAME: TeacherApp
  ENVIRONMENT: production
  BUILD_BASE_DIR: build
  DEBUG_INFO_DIR: debug_info

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      KEYSTORE_PATH: /tmp/keystore/key_store_file.jks  # Using Linux /tmp directory

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Verify Keystore
      id: verify_keystore
      run: |
        # Create secure keystore directory
        mkdir -p $(dirname "$KEYSTORE_PATH")
        
        # Decode keystore
        echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > "$KEYSTORE_PATH"
        
        # Basic file verification
        echo "::group::Keystore Verification"
        file "$KEYSTORE_PATH"
        echo "Keystore size: $(wc -c <"$KEYSTORE_PATH") bytes"
        echo "::endgroup::"
        
        # Verify password and alias
        if ! keytool -list \
          -keystore "$KEYSTORE_PATH" \
          -storepass "${{ secrets.KEY_PASSWORD }}" \
          -alias "${{ secrets.KEY_ALIAS }}" >/dev/null 2>&1; then
          echo "::error::Keystore verification failed!"
          exit 1
        fi

    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: ~/.pub-cache
        key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
        restore-keys: |
          ${{ runner.os }}-flutter-

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.3'
        channel: 'stable'

    - name: Verify Flutter Installation
      run: |
        flutter --version
        flutter doctor

    - name: Extract Version from pubspec.yaml
      id: extract_version
      run: |
        VERSION_NAME=$(grep '^version:' pubspec.yaml | cut -d ':' -f2 | tr -d '[:space:]')
        VERSION_NAME="${VERSION_NAME}-${GITHUB_RUN_NUMBER}"
        echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
        echo "VERSION_NAME set to: $VERSION_NAME"

    - name: Create Debug Info Directory
      run: |
        mkdir -p "${BUILD_BASE_DIR}/${DEBUG_INFO_DIR}"

    - name: Generate Env File
      run: |
        echo "DB_NAME=app.db" > .env.production
        echo 'APP_NAME="Personal Tuition Manager"' >> .env.production

    - name: Install Dependencies
      run: |
        flutter pub get

    - name: Cache Android dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-android-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-android-

    - name: Build App Bundle
      run: |
        flutter build appbundle --release \
          --obfuscate \
          --split-debug-info="${BUILD_BASE_DIR}/${DEBUG_INFO_DIR}" \
          --dart-define=ENV=${ENVIRONMENT} \
          --build-name="${VERSION_NAME}" \
          --build-number=${GITHUB_RUN_NUMBER}

    - name: Sign App Bundle
      run: |
        UNSIGNED_AAB="${BUILD_BASE_DIR}/app/outputs/bundle/release/app-release.aab"
        SIGNED_AAB="${BUILD_BASE_DIR}/app/outputs/bundle/release/${APK_NAME}-${VERSION_NAME}-${ENVIRONMENT}-signed.aab"

        jarsigner -verbose \
                  -sigalg SHA256withRSA \
                  -digestalg SHA-256 \
                  -keystore "$KEYSTORE_PATH" \
                  -storepass "${{ secrets.KEY_PASSWORD }}" \
                  -keypass "${{ secrets.KEY_PASSWORD }}" \
                  "$UNSIGNED_AAB" "${{ secrets.KEY_ALIAS }}"
        
        mv "$UNSIGNED_AAB" "$SIGNED_AAB"
        echo "SIGNED_AAB_PATH=$SIGNED_AAB" >> $GITHUB_ENV

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts
        path: |
          ${{ env.BUILD_BASE_DIR }}/app/outputs/bundle/release/*.aab
          ${{ env.BUILD_BASE_DIR }}/${{ env.DEBUG_INFO_DIR }}/*

    - name: Cleanup Keystore
      if: always()  # Runs even if previous steps fail
      run: |
        echo "Cleaning up keystore..."
        rm -f "$KEYSTORE_PATH"
        if [ -f "$KEYSTORE_PATH" ]; then
          echo "::warning::Failed to remove keystore!"
        else
          echo "Keystore removed successfully"
        fi

    - name: Build Status
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "::notice::Build completed successfully!"
        else
          echo "::error::Build failed!"
        fi